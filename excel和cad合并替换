import os
import threading
import gc
import time
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import filedialog, scrolledtext, messagebox
import xlwings as xw
import win32com.client
import sys

# ----------------- 日志统一输出 -----------------
class RedirectText:
    def __init__(self, text_widget):
        self.output = text_widget

    def write(self, string):
        self.output.insert(tk.END, string)
        self.output.see(tk.END)
        self.output.update()

    def flush(self):
        pass


def log(message):
    log_text.insert(tk.END, message + "\n")
    log_text.yview(tk.END)
    log_text.update()


# ----------------- Excel 替换函数（详细日志版） -----------------
def replace_excel_text(folder_path, old_texts, new_texts):
    log("✅ 开始处理 Excel 文件...")
    app = None
    try:
        app = xw.App(visible=False)
        files = [os.path.join(root, f) for root, _, filenames in os.walk(folder_path)
                 for f in filenames if f.lower().endswith((".xls", ".xlsx")) and not f.startswith('~$')]

        for file_path in files:
            log(f"\n➡️ 处理中：{file_path}")
            wb = None
            try:
                wb = app.books.open(file_path, update_links=False)
                file_modified = False

                for sheet in wb.sheets:
                    try:
                        used_range = sheet.used_range
                        if used_range:
                            data = used_range.value
                            if data:
                                updated = False
                                if isinstance(data, list):
                                    for i in range(len(data)):
                                        row = data[i]
                                        if isinstance(row, list):
                                            for j in range(len(row)):
                                                cell = row[j]
                                                if isinstance(cell, str):
                                                    for old, new in zip(old_texts, new_texts):
                                                        if old and old in cell:
                                                            new_cell = cell.replace(old, new)
                                                            log(f"  🔄 {sheet.name}!{sheet.range((i+1,j+1)).address} : '{cell}' → '{new_cell}'")
                                                            row[j] = new_cell
                                                            updated = True
                                    if updated:
                                        used_range.value = data
                                        file_modified = True
                                elif isinstance(data, str):
                                    for old, new in zip(old_texts, new_texts):
                                        if old and old in data:
                                            new_data = data.replace(old, new)
                                            log(f"  🔄 {sheet.name}!{used_range.address} : '{data}' → '{new_data}'")
                                            used_range.value = new_data
                                            file_modified = True
                    except Exception as e:
                        log(f"⚠️ 单元格处理异常: {str(e)[:50]}")

                    # 页眉页脚处理
                    try:
                        ps = sheet.api.PageSetup
                        for attr in ["LeftHeader", "CenterHeader", "RightHeader",
                                     "LeftFooter", "CenterFooter", "RightFooter"]:
                            val = getattr(ps, attr)
                            if val:
                                for old, new in zip(old_texts, new_texts):
                                    if old and old in val:
                                        new_val = val.replace(old, new)
                                        setattr(ps, attr, new_val)
                                        file_modified = True
                                        log(f"  🔄 {sheet.name} {attr} : '{val}' → '{new_val}'")
                    except Exception as e:
                        log(f"⚠️ 页眉页脚处理异常: {str(e)[:50]}")

                if file_modified:
                    wb.save()
                    log(f"  💾 已保存: {os.path.basename(file_path)}")
                else:
                    log(f"  ⏭️ 未修改: {os.path.basename(file_path)}")
            except Exception as e:
                log(f"❌ 文件处理失败: {os.path.basename(file_path)}\n    {str(e)[:100]}")
            finally:
                if wb:
                    wb.close()
                    gc.collect()

        log("🎉 Excel 文件处理完成！")
    except Exception as e:
        log(f"❌ Excel 致命错误: {str(e)}")
    finally:
        if app:
            app.quit()
            gc.collect()
            log("✅ Excel 资源已释放")


# ----------------- CAD 替换函数（增强稳定版） -----------------
def replace_text_in_dwg(dwg_path, old_texts, new_texts, acad):
    try:
        log(f"\n➡️ 处理文件: {dwg_path}")

        # 打开文件
        doc = acad.Documents.Open(dwg_path)

        # 计算动态延时（大文件等待更久）
        file_size_mb = os.path.getsize(dwg_path) / (1024 * 1024)
        delay_time = 1 + min(file_size_mb / 5, 3)
        time.sleep(delay_time)

        # 尝试强制刷新视图（帮助加载大型文件）
        try:
            doc.Application.ZoomExtents()
            time.sleep(0.5)
        except:
            pass

        try:
            ms = doc.ModelSpace
        except Exception:
            log("  ❌ 文件没有 ModelSpace，可能损坏或非标准 DWG。")
            doc.Close(False)
            return

        changed = 0
        for entity in ms:
            try:
                if entity.ObjectName in ["AcDbText", "AcDbMText"]:
                    for old, new in zip(old_texts, new_texts):
                        if old and old in entity.TextString:
                            entity.TextString = entity.TextString.replace(old, new)
                            changed += 1
                            log(f"  🔄 {entity.ObjectName} 替换: {old} -> {new}")

                elif entity.ObjectName == "AcDbBlockReference" and entity.HasAttributes:
                    for attr in entity.GetAttributes():
                        for old, new in zip(old_texts, new_texts):
                            if old and old in attr.TextString:
                                attr.TextString = attr.TextString.replace(old, new)
                                attr.Update()
                                changed += 1
                                log(f"  🔄 块属性文字替换完成: {old} -> {new}")
            except Exception as e_entity:
                log(f"    ⚠️ 实体处理异常: {e_entity}")

        # 再等待一点，确保属性更新完成
        time.sleep(0.5)

        if changed > 0:
            doc.Save()
            log(f"  ✅ 保存成功，共替换 {changed} 项。")
        else:
            log("  ⚠️ 未找到匹配项。")

        doc.Close(False)
        gc.collect()
        time.sleep(0.2)

    except Exception as e:
        log(f"❌ 错误处理文件 {dwg_path}: {e}")


def replace_cad_text(folder, old_texts, new_texts):
    dwg_files = [os.path.join(folder, f) for f in os.listdir(folder)
                 if f.lower().endswith(".dwg") and not f.startswith("~$")]
    if not dwg_files:
        log("⚠️ 未找到 DWG 文件")
        return

    try:
        log("🚀 启动 AutoCAD 中...")
        acad = win32com.client.Dispatch("AutoCAD.Application")
        acad.Visible = False
        time.sleep(2)

        for dwg_path in dwg_files:
            replace_text_in_dwg(dwg_path, old_texts, new_texts, acad)

        log(f"\n✅ 所有 DWG 文件处理完成，共处理 {len(dwg_files)} 个文件。")
    except Exception as e:
        log(f"❌ AutoCAD 启动失败: {str(e)}")


# ----------------- 启动替换线程 -----------------
def start_replacement():
    folder = folder_entry.get()
    old_texts = [e.get() for e in old_entries]
    new_texts = [e.get() for e in new_entries]

    log_text.delete(1.0, tk.END)

    if not folder or not os.path.isdir(folder):
        messagebox.showerror("错误", "请选择有效的文件夹")
        return
    if not any(old_texts) or not any(new_texts):
        messagebox.showerror("错误", "请输入至少一对替换文字")
        return

    def task():
        if excel_var.get():
            replace_excel_text(folder, old_texts, new_texts)
        if cad_var.get():
            replace_cad_text(folder, old_texts, new_texts)

    threading.Thread(target=task, daemon=True).start()


# ----------------- GUI 界面 -----------------
root = tk.Tk()
root.title("批量替换 Excel 和 CAD 文件文字")
root.geometry("800x700")
root.resizable(False, False)

# 文件夹选择
tk.Label(root, text="选择文件夹：").grid(row=0, column=0, sticky="e", padx=10, pady=10)
folder_entry = tk.Entry(root, width=72)
folder_entry.grid(row=0, column=1, padx=5)


def select_folder():
    folder = filedialog.askdirectory()
    if folder:
        folder_entry.delete(0, tk.END)
        folder_entry.insert(0, folder)


tk.Button(root, text="浏览...", command=select_folder).grid(row=0, column=2, padx=5)

# 替换文字输入
old_entries, new_entries = [], []
frame = tk.LabelFrame(root, text="批量替换文字（最多5组）", padx=10, pady=10)
frame.grid(row=1, column=0, columnspan=3, padx=10, pady=10, sticky="ew")

for i in range(5):
    row_index = i * 2
    tk.Label(frame, text=f"旧文字 {i+1}:").grid(row=row_index, column=0, sticky="e", pady=4)
    old_entry = tk.Entry(frame, width=40)
    old_entry.grid(row=row_index, column=1, pady=4, padx=(0, 50))
    old_entries.append(old_entry)

    tk.Label(frame, text=f"新文字 {i+1}:").grid(row=row_index, column=2, sticky="e", pady=4)
    new_entry = tk.Entry(frame, width=40)
    new_entry.grid(row=row_index, column=3, pady=4, padx=5)
    new_entries.append(new_entry)

    if i < 4:
        ttk.Separator(frame, orient='horizontal').grid(row=row_index+1, column=0, columnspan=4, sticky="ew", pady=5)

# 勾选框
excel_var = tk.BooleanVar(value=True)
cad_var = tk.BooleanVar(value=True)
tk.Checkbutton(root, text="处理 Excel 文件", variable=excel_var).grid(row=2, column=1, sticky="w", padx=20)
tk.Checkbutton(root, text="处理 CAD 文件", variable=cad_var).grid(row=2, column=1, sticky="e", padx=20)

# 开始按钮
tk.Button(root, text="开始替换", width=20, height=2, bg="#4CAF50", fg="white", command=start_replacement).grid(row=3, column=1, pady=15)

# 日志框
log_text = scrolledtext.ScrolledText(root, width=107, height=20)
log_text.grid(row=4, column=0, columnspan=3, padx=10, pady=10)

# 重定向 stdout/stderr
sys.stdout = RedirectText(log_text)
sys.stderr = RedirectText(log_text)

root.mainloop()


