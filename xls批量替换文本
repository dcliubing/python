import os
import threading
import gc
import tkinter as tk
from tkinter import filedialog, scrolledtext
import win32com.client as win32

def log(message):
    """在日志窗口显示消息"""
    log_text.insert(tk.END, message + "\n")
    log_text.yview(tk.END)

def select_folder():
    """选择 Excel 文件所在的文件夹"""
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        folder_entry.delete(0, tk.END)
        folder_entry.insert(0, folder_selected)

def start_replacement():
    """使用多线程启动 Excel 替换任务，防止 GUI 卡死"""
    threading.Thread(target=replace_excel_text, daemon=True).start()

def replace_excel_text():
    """遍历 Excel 文件并替换文本"""
    folder_path = folder_entry.get()
    old_text = old_text_entry.get()
    new_text = new_text_entry.get()

    if not folder_path:
        log("❌ 未选择目录，退出程序。")
        return
    if not old_text or not new_text:
        log("❌ 未输入替换文本，退出程序。")
        return

    log("✅ 开始处理 Excel 文件...")
    
    try:
        # 启动 Excel
        excel = win32.Dispatch('Excel.Application')
        excel.ScreenUpdating = False  # 禁用屏幕刷新，加快速度
        excel.DisplayAlerts = False  # 禁用警告弹窗

        # 查找所有 Excel 文件
        files = [os.path.join(root, f) for root, _, filenames in os.walk(folder_path) for f in filenames if f.endswith((".xls", ".xlsx"))]

        for file_path in files:
            log(f"🔄 处理中：{file_path}")
            try:
                workbook = excel.Workbooks.Open(file_path)
                file_modified = False

                for sheet in workbook.Sheets:
                    if not sheet.Visible:  # 跳过隐藏的 Sheet
                        continue

                    used_range = sheet.UsedRange
                    data = used_range.Value  # 获取整个表格数据

                    if data:
                        updated = False  # 记录是否修改
                        new_data = []  # 存储新数据

                        for row in data:
                            if isinstance(row, tuple):  # 多行数据
                                new_row = list(row)  # 转换为列表
                                for col_idx, cell in enumerate(new_row):
                                    if isinstance(cell, str) and old_text in cell:
                                        new_row[col_idx] = cell.replace(old_text, new_text)
                                        updated = True
                                new_data.append(tuple(new_row))  # 转换回元组
                            else:  # 单行数据
                                if isinstance(row, str) and old_text in row:
                                    row = row.replace(old_text, new_text)
                                    updated = True
                                new_data.append(row)

                        if updated:
                            used_range.Value = new_data  # 批量写回 Excel
                            file_modified = True

                if file_modified:
                    workbook.Save()
                    log(f"✅ 已修改并保存：{file_path}")
                workbook.Close(SaveChanges=True)
            except Exception as e:
                log(f"❌ 处理错误 {file_path}: {e}")

        # 关闭 Excel
        excel.Quit()
        del excel
        gc.collect()  # 回收资源
        log("🎉 所有 Excel 处理完成！")

    except Exception as e:
        log(f"❌ Excel 处理失败：{e}")

# 创建 GUI 界面
root = tk.Tk()
root.title("Excel 文本批量替换工具")
root.geometry("600x400")

# 选择文件夹
tk.Label(root, text="选择文件夹:").pack()
folder_frame = tk.Frame(root)
folder_frame.pack(fill="x", padx=10)
folder_entry = tk.Entry(folder_frame, width=50)
folder_entry.pack(side="left", fill="x", expand=True)
tk.Button(folder_frame, text="浏览", command=select_folder).pack(side="right")

# 旧文本输入框
tk.Label(root, text="原文本:").pack()
old_text_entry = tk.Entry(root, width=50)
old_text_entry.pack()

# 新文本输入框
tk.Label(root, text="替换为:").pack()
new_text_entry = tk.Entry(root, width=50)
new_text_entry.pack()

# 执行按钮
tk.Button(root, text="开始替换", command=start_replacement, bg="green", fg="white").pack(pady=10)

# 日志输出框
log_text = scrolledtext.ScrolledText(root, width=70, height=10)
log_text.pack(padx=10, pady=10)

# 运行 GUI
root.mainloop()
