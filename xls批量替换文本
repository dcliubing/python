import os
import threading
import gc
import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox
from tkinter import ttk
import xlwings as xw

def log(message):
    log_text.insert(tk.END, message + "\n")
    log_text.yview(tk.END)

def select_folder():
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        folder_entry.delete(0, tk.END)
        folder_entry.insert(0, folder_selected)

def start_replacement():
    threading.Thread(target=replace_excel_text, daemon=True).start()

def replace_excel_text():
    folder_path = folder_entry.get()
    old_text = old_text_entry.get()
    new_text = new_text_entry.get()

    if not folder_path:
        log("❌ 未选择目录，退出程序。")
        return
    if not old_text or not new_text:
        log("❌ 未输入替换文本，退出程序。")
        return

    log("✅ 开始处理 Excel 文件...")
    app = None

    try:
        app = xw.App(visible=False)
        files = [os.path.join(root, f) for root, _, filenames in os.walk(folder_path)
                 for f in filenames if f.lower().endswith((".xls", ".xlsx"))]

        for file_path in files:
            log(f"🔄 处理中：{file_path}")
            wb = None
            try:
                # 设置更新链接为False，避免.xls文件弹出更新链接提示
                wb = app.books.open(file_path, update_links=False)
                file_modified = False

                for sheet in wb.sheets:
                    # 替换单元格内容
                    try:
                        used_range = sheet.used_range
                        if used_range:
                            data = used_range.value
                            if data:
                                updated = False
                                if isinstance(data, list):
                                    for i in range(len(data)):
                                        row = data[i]
                                        if isinstance(row, list):
                                            for j in range(len(row)):
                                                cell = row[j]
                                                if isinstance(cell, str) and old_text in cell:
                                                    row[j] = cell.replace(old_text, new_text)
                                                    updated = True
                                    if updated:
                                        used_range.value = data
                                        file_modified = True
                                elif isinstance(data, str) and old_text in data:
                                    used_range.value = data.replace(old_text, new_text)
                                    file_modified = True
                    except Exception as e:
                        log(f"⚠️ 单元格处理异常: {str(e)[:50]}")

                    # 替换页眉页脚
                    try:
                        ps = sheet.api.PageSetup
                        for attr in ["LeftHeader", "CenterHeader", "RightHeader",
                                     "LeftFooter", "CenterFooter", "RightFooter"]:
                            val = getattr(ps, attr)
                            if val and old_text in val:
                                setattr(ps, attr, val.replace(old_text, new_text))
                                file_modified = True
                    except Exception as e:
                        log(f"⚠️ 页眉页脚处理异常: {str(e)[:50]}")

                if file_modified:
                    # 对于.xls文件，使用正确的保存方式
                    wb.save()
                    log(f"💾 已保存: {os.path.basename(file_path)}")
                else:
                    log(f"⏭️ 未修改: {os.path.basename(file_path)}")
            except Exception as e:
                log(f"❌ 文件处理失败: {os.path.basename(file_path)}\n    {str(e)[:100]}")
            finally:
                if wb:
                    wb.close()
                    gc.collect()

        log("🎉 所有文件处理完成！")

    except Exception as e:
        log(f"❌ 致命错误: {str(e)}")
    finally:
        if app:
            app.quit()
            gc.collect()
            log("✅ 资源已完全释放")

# ----------------- GUI 界面 --------------------
root = tk.Tk()
root.title("Excel 文本批量替换工具（支持 .xls/.xlsx，无需格式转换）")
root.geometry("680x500")

style = ttk.Style()
style.configure("TNotebook", tabposition="nw")
style.configure("TFrame", background="#f0f0f0")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True, padx=10, pady=10)

# 主界面
frame_main = ttk.Frame(notebook)
notebook.add(frame_main, text="主界面")

tk.Label(frame_main, text="选择文件夹:", font=("微软雅黑", 10)).pack(pady=5)
folder_frame = ttk.Frame(frame_main)
folder_frame.pack(fill="x", padx=20)
folder_entry = ttk.Entry(folder_frame, width=50)
folder_entry.pack(side="left", fill="x", expand=True)
ttk.Button(folder_frame, text="浏览", command=select_folder).pack(side="right")

ttk.Label(frame_main, text="原文本:", font=("微软雅黑", 10)).pack(pady=5)
old_text_entry = ttk.Entry(frame_main, width=50)
old_text_entry.pack()

ttk.Label(frame_main, text="替换为:", font=("微软雅黑", 10)).pack(pady=5)
new_text_entry = ttk.Entry(frame_main, width=50)
new_text_entry.pack()

ttk.Button(frame_main, text="开始替换", command=start_replacement, style="Accent.TButton").pack(pady=15)

# 日志区域
log_frame = ttk.Frame(frame_main)
log_frame.pack(fill="both", expand=True, padx=10, pady=5)
log_text = scrolledtext.ScrolledText(log_frame, width=85, height=15, font=("Consolas", 9))
log_text.pack(fill="both", expand=True)

# 关于界面
frame_about = ttk.Frame(notebook)
notebook.add(frame_about, text="关于")
about_text = """Excel 批量替换工具（xlwings 版本）

- 支持 .xls 和 .xlsx
- 保留原格式，无需另存
- 替换内容包括：单元格 + 页眉页脚
- 进程独立、稳定处理
"""
ttk.Label(frame_about, text=about_text, font=("微软雅黑", 11), justify="left").pack(padx=30, pady=30, anchor="w")

root.mainloop()
